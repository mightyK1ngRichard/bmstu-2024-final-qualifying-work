// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v5.28.2
// source: cake.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CakeID string `protobuf:"bytes,1,opt,name=cakeID,proto3" json:"cakeID,omitempty"`
}

func (x *CakeRequest) Reset() {
	*x = CakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeRequest) ProtoMessage() {}

func (x *CakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeRequest.ProtoReflect.Descriptor instead.
func (*CakeRequest) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{0}
}

func (x *CakeRequest) GetCakeID() string {
	if x != nil {
		return x.CakeID
	}
	return ""
}

type CakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cake *Cake `protobuf:"bytes,1,opt,name=cake,proto3" json:"cake,omitempty"` // Информация о торте
}

func (x *CakeResponse) Reset() {
	*x = CakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeResponse) ProtoMessage() {}

func (x *CakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeResponse.ProtoReflect.Descriptor instead.
func (*CakeResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{1}
}

func (x *CakeResponse) GetCake() *Cake {
	if x != nil {
		return x.Cake
	}
	return nil
}

// Информация о торте
type Cake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                 // ID торта
	Name          string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                             // Название торта
	ImageUrl      string      `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`                     // URL изображения торта
	KgPrice       float64     `protobuf:"fixed64,4,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`                      // Цена за кг
	Rating        int32       `protobuf:"varint,5,opt,name=rating,proto3" json:"rating,omitempty"`                                        // Рейтинг (0-5)
	Description   string      `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                               // Описание торта
	Mass          float64     `protobuf:"fixed64,7,opt,name=mass,proto3" json:"mass,omitempty"`                                           // Масса торта
	IsOpenForSale bool        `protobuf:"varint,8,opt,name=is_open_for_sale,json=isOpenForSale,proto3" json:"is_open_for_sale,omitempty"` // Доступен ли для продажи
	Owner         *User       `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`                                           // Информация о владельце
	Fillings      []*Filling  `protobuf:"bytes,10,rep,name=fillings,proto3" json:"fillings,omitempty"`                                    // Список начинок
	Categories    []*Category `protobuf:"bytes,11,rep,name=categories,proto3" json:"categories,omitempty"`                                // Список категорий
}

func (x *Cake) Reset() {
	*x = Cake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cake) ProtoMessage() {}

func (x *Cake) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cake.ProtoReflect.Descriptor instead.
func (*Cake) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{2}
}

func (x *Cake) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cake) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cake) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Cake) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *Cake) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Cake) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cake) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Cake) GetIsOpenForSale() bool {
	if x != nil {
		return x.IsOpenForSale
	}
	return false
}

func (x *Cake) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Cake) GetFillings() []*Filling {
	if x != nil {
		return x.Fillings
	}
	return nil
}

func (x *Cake) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

// Информация о владельце
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`             // ID пользователя
	Fio      string `protobuf:"bytes,2,opt,name=fio,proto3" json:"fio,omitempty"`           // Полное имя
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"` // Никнейм
	Mail     string `protobuf:"bytes,4,opt,name=mail,proto3" json:"mail,omitempty"`         // Электронная почта
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetFio() string {
	if x != nil {
		return x.Fio
	}
	return ""
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

// Информация о начинке
type Filling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // ID начинки
	Name        string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // Название начинки
	ImageUrl    string  `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"` // URL изображения начинки
	Content     string  `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                   // Состав начинки
	KgPrice     float64 `protobuf:"fixed64,5,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`  // Цена за кг
	Description string  `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`           // Описание начинки
}

func (x *Filling) Reset() {
	*x = Filling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filling) ProtoMessage() {}

func (x *Filling) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filling.ProtoReflect.Descriptor instead.
func (*Filling) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{4}
}

func (x *Filling) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Filling) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filling) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Filling) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Filling) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *Filling) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Информация о категории
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // ID категории
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // Название категории
	ImageUrl string `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"` // URL изображения категории
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cake_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{5}
}

func (x *Category) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

var File_cake_proto protoreflect.FileDescriptor

var file_cake_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0b,
	0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x6b, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6b,
	0x65, 0x49, 0x44, 0x22, 0x29, 0x0a, 0x0c, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x04, 0x63, 0x61, 0x6b, 0x65, 0x22, 0xc7,
	0x02, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x67, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x73, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66,
	0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x32, 0x32, 0x0a, 0x0b, 0x43, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x0c, 0x2e, 0x43, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x61, 0x6b, 0x65, 0x2f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cake_proto_rawDescOnce sync.Once
	file_cake_proto_rawDescData = file_cake_proto_rawDesc
)

func file_cake_proto_rawDescGZIP() []byte {
	file_cake_proto_rawDescOnce.Do(func() {
		file_cake_proto_rawDescData = protoimpl.X.CompressGZIP(file_cake_proto_rawDescData)
	})
	return file_cake_proto_rawDescData
}

var file_cake_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cake_proto_goTypes = []interface{}{
	(*CakeRequest)(nil),  // 0: CakeRequest
	(*CakeResponse)(nil), // 1: CakeResponse
	(*Cake)(nil),         // 2: Cake
	(*User)(nil),         // 3: User
	(*Filling)(nil),      // 4: Filling
	(*Category)(nil),     // 5: Category
}
var file_cake_proto_depIdxs = []int32{
	2, // 0: CakeResponse.cake:type_name -> Cake
	3, // 1: Cake.owner:type_name -> User
	4, // 2: Cake.fillings:type_name -> Filling
	5, // 3: Cake.categories:type_name -> Category
	0, // 4: CakeService.Cake:input_type -> CakeRequest
	1, // 5: CakeService.Cake:output_type -> CakeResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_cake_proto_init() }
func file_cake_proto_init() {
	if File_cake_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cake_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cake_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cake_proto_goTypes,
		DependencyIndexes: file_cake_proto_depIdxs,
		MessageInfos:      file_cake_proto_msgTypes,
	}.Build()
	File_cake_proto = out.File
	file_cake_proto_rawDesc = nil
	file_cake_proto_goTypes = nil
	file_cake_proto_depIdxs = nil
}
